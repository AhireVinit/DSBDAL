

    import pandas as pd

    air_quality=pd.read_csv('AirQualityUCI.csv')

    air_quality.head()

             Date      Time  CO(GT)  PT08.S1(CO)  NMHC(GT)  Wind  PT08.S2(NMHC)  \
    0  10-03-2004  18:00:00     2.6         1360       150  11.9           1046   
    1  10-03-2004  19:00:00     2.0         1292       112   9.4            955   
    2  10-03-2004  20:00:00     2.2         1402        88   9.0            939   
    3  10-03-2004  21:00:00     2.2         1376        80   9.2            948   
    4  10-03-2004  22:00:00     1.6         1272        51   6.5            836   

       Solor.R  PT08.S3(NOx)  NO2(GT)  PT08.S4(NO2)  Ozone  Temp    RH      AH  
    0      166          1056      113          1692   1268  13.6  48.9  0.7578  
    1      103          1174       92          1559    972  13.3  47.7  0.7255  
    2      131          1140      114          1555   1074  11.9  54.0  0.7502  
    3      172          1092      122          1584   1203  11.0  60.0  0.7867  
    4      131          1205      116          1490   1110  11.2  59.6  0.7888  

    air_quality.isnull().sum()

    Date             0
    Time             0
    CO(GT)           0
    PT08.S1(CO)      0
    NMHC(GT)         0
    Wind             0
    PT08.S2(NMHC)    0
    Solor.R          0
    PT08.S3(NOx)     0
    NO2(GT)          0
    PT08.S4(NO2)     0
    Ozone            0
    Temp             0
    RH               0
    AH               0
    dtype: int64

    air_quality.shape

    (9357, 15)

    air_quality.columns

    Index(['Date', 'Time', 'CO(GT)', 'PT08.S1(CO)', 'NMHC(GT)', 'Wind',
           'PT08.S2(NMHC)', 'Solor.R', 'PT08.S3(NOx)', 'NO2(GT)', 'PT08.S4(NO2)',
           'Ozone', 'Temp', 'RH', 'AH'],
          dtype='object')

    #transformation and error correcting

    air_quality.rename(columns={'Temp':'Temparature','RH':'Humidity','AH':'Absolute Humidity'},inplace=True)

    air_quality['Datetime']=air_quality['Date']+air_quality['Time']

    air_quality.set_index('Datetime',inplace=True)

    air_quality.head()

                              Date      Time  CO(GT)  PT08.S1(CO)  NMHC(GT)  Wind  \
    Datetime                                                                        
    10-03-200418:00:00  10-03-2004  18:00:00     2.6         1360       150  11.9   
    10-03-200419:00:00  10-03-2004  19:00:00     2.0         1292       112   9.4   
    10-03-200420:00:00  10-03-2004  20:00:00     2.2         1402        88   9.0   
    10-03-200421:00:00  10-03-2004  21:00:00     2.2         1376        80   9.2   
    10-03-200422:00:00  10-03-2004  22:00:00     1.6         1272        51   6.5   

                        PT08.S2(NMHC)  Solor.R  PT08.S3(NOx)  NO2(GT)  \
    Datetime                                                            
    10-03-200418:00:00           1046      166          1056      113   
    10-03-200419:00:00            955      103          1174       92   
    10-03-200420:00:00            939      131          1140      114   
    10-03-200421:00:00            948      172          1092      122   
    10-03-200422:00:00            836      131          1205      116   

                        PT08.S4(NO2)  Ozone  Temparature  Humidity  \
    Datetime                                                         
    10-03-200418:00:00          1692   1268         13.6      48.9   
    10-03-200419:00:00          1559    972         13.3      47.7   
    10-03-200420:00:00          1555   1074         11.9      54.0   
    10-03-200421:00:00          1584   1203         11.0      60.0   
    10-03-200422:00:00          1490   1110         11.2      59.6   

                        Absolute Humidity  
    Datetime                               
    10-03-200418:00:00             0.7578  
    10-03-200419:00:00             0.7255  
    10-03-200420:00:00             0.7502  
    10-03-200421:00:00             0.7867  
    10-03-200422:00:00             0.7888  

    #Making subset of dataset to show integration
    air_subset1=air_quality[['Date','Time','CO(GT)','PT08.S1(CO)','NMHC(GT)','PT08.S2(NMHC)','Temparature']]

    air_subset2=air_quality[['Temparature','Humidity','Absolute Humidity']]

    air_subset1.head()

                              Date      Time  CO(GT)  PT08.S1(CO)  NMHC(GT)  \
    Datetime                                                                  
    10-03-200418:00:00  10-03-2004  18:00:00     2.6         1360       150   
    10-03-200419:00:00  10-03-2004  19:00:00     2.0         1292       112   
    10-03-200420:00:00  10-03-2004  20:00:00     2.2         1402        88   
    10-03-200421:00:00  10-03-2004  21:00:00     2.2         1376        80   
    10-03-200422:00:00  10-03-2004  22:00:00     1.6         1272        51   

                        PT08.S2(NMHC)  Temparature  
    Datetime                                        
    10-03-200418:00:00           1046         13.6  
    10-03-200419:00:00            955         13.3  
    10-03-200420:00:00            939         11.9  
    10-03-200421:00:00            948         11.0  
    10-03-200422:00:00            836         11.2  

    air_subset2.head()

                        Temparature  Humidity  Absolute Humidity
    Datetime                                                    
    10-03-200418:00:00         13.6      48.9             0.7578
    10-03-200419:00:00         13.3      47.7             0.7255
    10-03-200420:00:00         11.9      54.0             0.7502
    10-03-200421:00:00         11.0      60.0             0.7867
    10-03-200422:00:00         11.2      59.6             0.7888

    integrated_data=pd.merge(air_subset1,air_subset2,on='Temparature')

    integrated_data.head()

             Date      Time  CO(GT)  PT08.S1(CO)  NMHC(GT)  PT08.S2(NMHC)  \
    0  10-03-2004  18:00:00     2.6         1360       150           1046   
    1  10-03-2004  18:00:00     2.6         1360       150           1046   
    2  10-03-2004  18:00:00     2.6         1360       150           1046   
    3  10-03-2004  18:00:00     2.6         1360       150           1046   
    4  10-03-2004  18:00:00     2.6         1360       150           1046   

       Temparature  Humidity  Absolute Humidity  
    0         13.6      48.9             0.7578  
    1         13.6      62.1             0.9636  
    2         13.6      56.3             0.8743  
    3         13.6      58.8             0.9120  
    4         13.6      55.1             0.8560  

    #DATA_MODELLING

    heart=pd.read_csv("heart.csv")

    heart.head()

       age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \
    0   52    1   0       125   212    0        1      168      0      1.0      2   
    1   53    1   0       140   203    1        0      155      1      3.1      0   
    2   70    1   0       145   174    0        1      125      1      2.6      0   
    3   61    1   0       148   203    0        1      161      0      0.0      2   
    4   62    0   0       138   294    1        1      106      0      1.9      1   

       ca  thal  target  
    0   2     3       0  
    1   0     3       0  
    2   0     3       0  
    3   1     3       0  
    4   3     2       0  

    heart.isnull().sum()

    age         0
    sex         0
    cp          0
    trestbps    0
    chol        0
    fbs         0
    restecg     0
    thalach     0
    exang       0
    oldpeak     0
    slope       0
    ca          0
    thal        0
    target      0
    dtype: int64

    heart.info()

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 1025 entries, 0 to 1024
    Data columns (total 14 columns):
     #   Column    Non-Null Count  Dtype  
    ---  ------    --------------  -----  
     0   age       1025 non-null   int64  
     1   sex       1025 non-null   int64  
     2   cp        1025 non-null   int64  
     3   trestbps  1025 non-null   int64  
     4   chol      1025 non-null   int64  
     5   fbs       1025 non-null   int64  
     6   restecg   1025 non-null   int64  
     7   thalach   1025 non-null   int64  
     8   exang     1025 non-null   int64  
     9   oldpeak   1025 non-null   float64
     10  slope     1025 non-null   int64  
     11  ca        1025 non-null   int64  
     12  thal      1025 non-null   int64  
     13  target    1025 non-null   int64  
    dtypes: float64(1), int64(13)
    memory usage: 112.2 KB

    y=heart[['target']]
    x=heart.drop(y,axis=1)

    y.head()

       target
    0       0
    1       0
    2       0
    3       0
    4       0

    x.head()

       age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \
    0   52    1   0       125   212    0        1      168      0      1.0      2   
    1   53    1   0       140   203    1        0      155      1      3.1      0   
    2   70    1   0       145   174    0        1      125      1      2.6      0   
    3   61    1   0       148   203    0        1      161      0      0.0      2   
    4   62    0   0       138   294    1        1      106      0      1.9      1   

       ca  thal  
    0   2     3  
    1   0     3  
    2   0     3  
    3   1     3  
    4   3     2  

    y['target'].value_counts()

    1    526
    0    499
    Name: target, dtype: int64

    heart.dtypes

    age           int64
    sex           int64
    cp            int64
    trestbps      int64
    chol          int64
    fbs           int64
    restecg       int64
    thalach       int64
    exang         int64
    oldpeak     float64
    slope         int64
    ca            int64
    thal          int64
    target        int64
    dtype: object

    from sklearn.model_selection import train_test_split

    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

    x_train.shape,x_test.shape,y_train.shape,y_test.shape

    ((820, 13), (205, 13), (820, 1), (205, 1))

    from sklearn.linear_model import LogisticRegression

    lr=LogisticRegression()

    model=lr.fit(x_train,y_train)
    print("model build successfully")

    model build successfully

    /usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().
      y = column_or_1d(y, warn=True)
    /usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
    STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

    Increase the number of iterations (max_iter) or scale the data as shown in:
        https://scikit-learn.org/stable/modules/preprocessing.html
    Please also refer to the documentation for alternative solver options:
        https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
      n_iter_i = _check_optimize_result(

    y_test['Prediction']=model.predict(x_test)

    y_test.head()

         target  Prediction
    807       1           1
    27        0           1
    77        0           0
    406       1           1
    886       0           0

    from sklearn.metrics import accuracy_score

    print(accuracy_score(y_test['target'],y_test['Prediction']))

    0.8634146341463415
